import random
from datetime import timedelta

from aiogram import Router, F
from aiogram.types import Message
from sqlalchemy.ext.asyncio import AsyncSession
from bot.keyboards.inline import get_inline_buttons
from database.queries.pet_query import get_pet, check_feed_status, update_pet_experience, update_next_feed_time
from database.queries.work_query import (
    check_work_status,
    complete_work,
    assign_work_to_pet,
    update_next_work_time,
    get_available_works,
    get_pet_work_time,
    get_work
)
from utils import format_timedelta

router = Router(name=__name__)


@router.message(F.text == '@JashylBot –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
async def get_action_info(message: Message, session: AsyncSession):
    telegram_id = message.from_user.id
    if not await get_pet(session, telegram_id):
        await message.answer('–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –ø–∏—Ç–æ–º—Ü–∞üò£')
        return

    feed_status = await check_feed_status(session, telegram_id)
    can_feed_pet = feed_status[0]

    can_start_new_work, can_finish_work, time_since_start_work, time_until_next_work = await check_work_status(session, telegram_id)

    if can_finish_work:
        work_message = '–ú–æ–∂–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É'
    elif not can_start_new_work:
        if time_since_start_work < timedelta(hours=2):  # –ï—Å–ª–∏ –ø–∏—Ç–æ–º–µ—Ü —Å–µ–π—á–∞—Å —Ä–∞–±–æ—Ç–∞–µ—Ç
            remaining_work_time = timedelta(hours=2) - time_since_start_work
            work_message = f'–û—Å—Ç–∞–ª–æ—Å—å {format_timedelta(remaining_work_time)} –¥–æ –∫–æ–Ω—Ü–∞ —Ä–∞–±–æ—Ç—ã'
        else:
            work_message = f'–°–ª–µ–¥—É—é—â–∞—è —Ä–∞–±–æ—Ç–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ {format_timedelta(time_until_next_work)}'
    else:
        work_message = '–ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ —Ä–∞–±–æ—Ç—É'

    buttons = {}
    if can_feed_pet:
        buttons['–ü–æ–∫–æ—Ä–º–∏—Ç—å –ø–∏—Ç–æ–º—Ü–∞'] = '–ü–æ–∫–æ—Ä–º–∏—Ç—å –ø–∏—Ç–æ–º—Ü–∞'
    if can_start_new_work and not can_finish_work:
        buttons['–ù–∞ —Ä–∞–±–æ—Ç—É'] = '–ù–∞ —Ä–∞–±–æ—Ç—É'
    elif can_finish_work:
        buttons['–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É'] = '–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É'
    buttons['–ú–æ–π –ø–∏—Ç–æ–º–µ—Ü'] = '–ú–æ–π –ø–∏—Ç–æ–º–µ—Ü'

    inline_keyboard = get_inline_buttons(
        buttons=buttons,
        sizes=(2, 1),
        switch_inline=True
    )

    await message.answer(
        f'üçé {"–ú–æ–∂–Ω–æ –∫–æ—Ä–º–∏—Ç—å" if can_feed_pet else f"–ú–æ–∂–Ω–æ –ø–æ–∫–æ—Ä–º–∏—Ç—å —á–µ—Ä–µ–∑ {format_timedelta(feed_status[1])}"}\n'
        f'üíº {work_message}',
        reply_markup=inline_keyboard
    )


@router.message(F.text == '@JashylBot –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å')
async def get_inventory_info(message: Message, session: AsyncSession):
    await message.answer('–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç')


@router.message(F.text == '@JashylBot –ù–∞ —Ä–∞–±–æ—Ç—É')
async def to_work(message: Message, session: AsyncSession):
    telegram_id = message.from_user.id

    if not await get_pet(session, telegram_id):
        await message.answer('–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –ø–∏—Ç–æ–º—Ü–∞üò£')
        return

    can_start_new_work, can_finish_work, time_since_start_work, time_until_next_work = await check_work_status(session, telegram_id)

    if can_finish_work:
        await message.answer(
            '–í–∞—à –ø–∏—Ç–æ–º–µ—Ü –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É\\. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–∞–±–æ—Ç—É –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –Ω–æ–≤–æ–π',
            reply_markup=get_inline_buttons(
                buttons={'–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É': '–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É'},
                switch_inline=True
            )
        )
        return

    if not can_start_new_work:
        if time_since_start_work < timedelta(hours=2):
            remaining_work_time = timedelta(hours=2) - time_since_start_work
            await message.answer(
                f'–í–∞—à –ø–∏—Ç–æ–º–µ—Ü —Å–µ–π—á–∞—Å —Ä–∞–±–æ—Ç–∞–µ—Ç\\. –û—Å—Ç–∞–ª–æ—Å—å {format_timedelta(remaining_work_time)} –¥–æ –∫–æ–Ω—Ü–∞ —Ä–∞–±–æ—Ç—ã'
            )
        else:
            await message.answer(
                f'–í–∞—à –ø–∏—Ç–æ–º–µ—Ü –æ—Ç–¥—ã—Ö–∞–µ—Ç –ø–æ—Å–ª–µ —Ä–∞–±–æ—Ç—ã\\. –°–ª–µ–¥—É—é—â–∞—è —Ä–∞–±–æ—Ç–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ {format_timedelta(time_until_next_work)}'
            )
        return

    works = await get_available_works(session)
    buttons = {}
    template_text = ''

    for index, work in enumerate(works):
        name = ''
        if index == 0:
            name = f'üï¥Ô∏è*{work.name}*'
            buttons[f'{work.name}'] = f'–†–∞–±–æ—Ç–∞ —Å—Ç–æ—è–ª—å—â–∏–∫ –≤ –æ—á–µ—Ä–µ–¥–∏'
        elif index == 1:
            name = f'ü¶Ä*{work.name}*'
            buttons[f'{work.name}'] = f'–†–∞–±–æ—Ç–∞ –ª–æ–≤–µ—Ü –∫—Ä–∞–±–æ–≤'
        elif index == 2:
            name = f'‚òï*{work.name}*'
            buttons[f'{work.name}'] = f'–†–∞–±–æ—Ç–∞ –≤ –∫–æ—Ñ–µ–π–Ω–µ'

        description = work.description.replace('.', '\\.').replace(',', '\\,')
        template_text += f'{name}\n{description}\n\n'

    reply_markup = get_inline_buttons(
        buttons=buttons,
        sizes=(1,),
        switch_inline=True
    )

    await message.answer(template_text, reply_markup=reply_markup)


@router.message(F.text.startswith('@JashylBot –†–∞–±–æ—Ç–∞'))
async def select_work(message: Message, session: AsyncSession):
    telegram_id = message.from_user.id
    if not await get_pet(session, telegram_id):
        await message.answer('–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –ø–∏—Ç–æ–º—Ü–∞üò£')
        return

    work_id = 0
    if message.text == '@JashylBot –†–∞–±–æ—Ç–∞ —Å—Ç–æ—è–ª—å—â–∏–∫ –≤ –æ—á–µ—Ä–µ–¥–∏':
        work_id = 1
    elif message.text == '@JashylBot –†–∞–±–æ—Ç–∞ –ª–æ–≤–µ—Ü –∫—Ä–∞–±–æ–≤':
        work_id = 2
    elif message.text == '@JashylBot –†–∞–±–æ—Ç–∞ –≤ –∫–æ—Ñ–µ–π–Ω–µ':
        work_id = 3
    else:
        await message.answer('–í—ã–±—Ä–∞–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
        return

    work = await get_work(session, work_id)
    pet_work_time = await get_pet_work_time(session, telegram_id)

    if pet_work_time:
        can_start_new_work, _, _, _ = await check_work_status(session, telegram_id)
        if not can_start_new_work:
            work_status = await check_work_status(session, telegram_id)
            remaining_time = format_timedelta(work_status[3])
            await message.answer(f'–í–∞–º –Ω—É–∂–Ω–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å –µ—â—ë {remaining_time} –ø–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Ä–∞–±–æ—Ç—É')
            return

        await update_next_work_time(session, telegram_id)
        await assign_work_to_pet(session, telegram_id, work.id)  # –î–æ–±–∞–≤–ª–µ–Ω–æ —Å—é–¥–∞ –¥–ª—è –≤–µ—Ä–Ω–æ—Å—Ç–∏
        await message.answer(f'–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–ª–∏ —Ä–∞–±–æ—Ç—É: {work.name}')
    else:
        await assign_work_to_pet(session, telegram_id, work.id)
        await message.answer(f'–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–ª–∏ —Ä–∞–±–æ—Ç—É: {work.name}')


@router.message(F.text == '@JashylBot –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É')
async def finish_work(message: Message, session: AsyncSession):
    telegram_id = message.from_user.id
    can_start_new_work, can_finish_work, _, _ = await check_work_status(session, telegram_id)

    if not can_finish_work:
        await message.answer('–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å–µ–π—á–∞—Å')
        return

    pet_work_time = await get_pet_work_time(session, telegram_id)
    if not pet_work_time or not pet_work_time.work_id:
        await message.answer('–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–π —Ä–∞–±–æ—Ç–µ –ø–∏—Ç–æ–º—Ü–∞')
        return

    work_id = pet_work_time.work_id
    work = await get_work(session, work_id)
    if not work:
        await message.answer('–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–±–æ—Ç–µ')
        return

    reward = random.randint(work.min_reward, work.max_reward)
    experience_gain = 0
    no_reward = False
    injury = False

    if work.work_type_id == 1:
        experience_gain = 1 if random.randint(0, 100) <= 15 else 0
    elif work.work_type_id == 2:
        no_reward = True if random.randint(0, 100) <= work.chance_no_reward else False
    elif work.work_type_id == 3:
        injury = True if random.randint(0, 100) <= work.chance_injury else False

    success = await complete_work(session, telegram_id, reward, experience_gain, no_reward, injury)
    message_template = f'üêû: *\\+{reward} –∂—É—á–∫–æ–≤*\n'
    if experience_gain:
        message_template += f'‚ú®: *\\+1 –∫ –æ–ø—ã—Ç—É*\n'

    if success:
        await message.answer('–†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ\\!\n' + message_template)
    else:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã')


@router.message(F.text == '@JashylBot –ü–æ–∫–æ—Ä–º–∏—Ç—å –ø–∏—Ç–æ–º—Ü–∞')
async def feed_pet(message: Message, session: AsyncSession):
    telegram_id = message.from_user.id
    if not await get_pet(session, telegram_id):
        await message.answer('–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –ø–∏—Ç–æ–º—Ü–∞üò£')
        return

    feed_status = await check_feed_status(session, telegram_id)
    if not feed_status[0]:
        remaining_time = format_timedelta(feed_status[1])
        await message.answer(f'–í—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫–æ—Ä–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ {remaining_time}')
        return

    await update_pet_experience(session, telegram_id)
    await update_next_feed_time(session, telegram_id)

    await message.answer(
        f'–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–∫–æ—Ä–º–∏–ª–∏ –ø–∏—Ç–æ–º—Ü–∞\\!\n'
        f'‚ú®: *\\+1 –∫ –æ–ø—ã—Ç—É*\n'
        f'üêû: *\\+50 –∂—É—á–∫–æ–≤*'
    )
